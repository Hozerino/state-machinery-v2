[gd_scene load_steps=7 format=3 uid="uid://bihcmmmy3u0xy"]

[ext_resource type="Script" uid="uid://c6lkqat236jr0" path="res://src/core/controller_layer/controller.gd" id="1_bajro"]

[sub_resource type="GDScript" id="GDScript_1unho"]
script/source = "class_name BaseInputGathererService extends Node

# interface de respeito!
# a implementacao disso decide se vai andar pra frente com W, ou se eh uma IA monstra mt inteligente
func gather_input() -> BaseInputData:
	return null
"

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_0fsrk"]

[sub_resource type="GDScript" id="GDScript_e7oot"]
script/source = "extends Node3D
class_name Model

@onready var backend_animation_database: BackendAnimationDatabase = $BackendAnimationDatabase

@export var stats: ModelStats

var states_table: Dictionary[String, State]
var current_state: State

func _ready() -> void:
	for node in _get_all_children($States):
		if(node is State):
			# validation
			if states_table.get(node.id):
				push_error(\"Oops, node with id=%s already registered.\" % [node.id])
			states_table[node.id] = node
	pass

func base_tick(input : InputData, delta : float):
	var next_state_id :String = current_state.should_transition_to(input)
	if next_state_id != \"\" and current_state.identifier != next_state_id:
		switch_to(next_state_id)
	current_state.update(input, delta)
	stats.tick(delta)

func switch_to(next_state_id : String):
	print(\"%s -> %s\" % [current_state.id % next_state_id] )
	current_state.exit()
	current_state = states_table[next_state_id]
	current_state.enter()

func _get_all_children(node: Node) -> Array:
	var _nodes: Array = []
	for N in node.get_children():
		if N.get_child_count() > 0:
			_nodes.append(N)
			_nodes.append_array(_get_all_children(N))
		else:
			_nodes.append(N)
	return _nodes

func inject_dependencies():
	for state: BaseState in states_table.values():
		state.backend_animation_database = backend_animation_database
		state.model = self

##### INTERFACE #####
func _tick(input : BaseInputData, delta : float):
	pass
"

[sub_resource type="GDScript" id="GDScript_6ao64"]
script/source = "class_name BackendAnimationDatabase extends AnimationPlayer

# TODO implementar!
# tentar linkar state com animacao mas de um jeito pratico de editar e consultar, tipo:

### Durante a CRIAÇÃO: ###
# quero linkar State WALK -> Animation WALK_FLAG
# quero q seja facil de ver onde to botando as flags tlgd? ver a animacao tocando em uma janela e colcoar a flag em outra de um jeito facil
# tem q testar esse workflow

### pra buscar:
# db.get_flag_at(state_id, tempo: float)
# e se eu nao quiser bool? :( dps eu faco outros tipos, tipo o de Vector3D
func get_property_value(state_id: String, current_progress: float) -> bool:
	return false
"

[sub_resource type="GDScript" id="GDScript_bajro"]
script/source = "extends Node3D
class_name BaseView

##### INJECTION! #####
var model: BaseModel

# pega as info do model (skeleton, resources, whatever) e apresenta
# seja na skin do boneco ou no HUD
func _process(_delta):
	pass
"

[node name="Controller" type="CharacterBody3D"]
script = ExtResource("1_bajro")

[node name="InputGathererService" type="Node" parent="."]
script = SubResource("GDScript_1unho")

[node name="CollisionShape" type="CollisionShape3D" parent="."]
shape = SubResource("CapsuleShape3D_0fsrk")

[node name="Model" type="Node3D" parent="."]
script = SubResource("GDScript_e7oot")

[node name="BackendAnimationDatabase" type="AnimationPlayer" parent="Model"]
script = SubResource("GDScript_6ao64")

[node name="States" type="Node" parent="Model"]

[node name="View" type="Node3D" parent="."]
script = SubResource("GDScript_bajro")
